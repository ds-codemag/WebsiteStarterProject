// Grid from Bootstrap v4.0.0

// Evaluate $grid-breakpoints map
$prev-key: null;
$prev-num: null;
@each $key, $num in $grid-breakpoints {
    @if $prev-num == null {
        // Do nothing
    } @else if $prev-num >= $num {
        @warn 'Breakpoints map must be in ascending order, but \'#{$key}\' has value #{$num} which isn\'t greater than #{$prev-num} in \'#{$prev-key}\'!';
    }
    $prev-key: $key;
    $prev-num: $num;
}

// Check if the breakpoints starts from 0
$values: map-values($grid-breakpoints);
$first-value: nth($values, 1);
@if $first-value != 0 {
    @warn 'First breakpoint must start at 0, but starts at #{$first-value}.';
}

// Fluid container
// Full width layout container
%container-fluid,
.container-fluid {
    width: 100%;
    margin-right: auto;
    margin-left: auto;
    padding-right: ($grid-gutter-width / 2);
    padding-left: ($grid-gutter-width / 2);
}

// Container
// Container with max width for different screen sizes
.container {
    @extend %container-fluid;
    @each $breakpoint, $container-max-width in $container-max-widths {
        @include media-min-width($breakpoint, $grid-breakpoints) {
            max-width: $container-max-width;
        }
    }
}

// Row
// Displays grid and clears left and right padding
.row {
    display: flex;
    flex-wrap: wrap;
    margin-right: ($grid-gutter-width / -2);
    margin-left: ($grid-gutter-width / -2);
}

// Remove the negative margin from default .row,
// then the horizontal padding from all immediate
// children columns (to prevent runaway style inheritance)
.no-gutters {
    margin-right: 0;
    margin-left: 0;

    > .col,
    > [class*='col-'] {
        padding-right: 0;
        padding-left: 0;
    }
}

// Columns
// Common styles for small and large grid columns

// Common properties for all breakpoints
%grid-column {
    position: relative;
    width: 100%;
    min-height: 1px; // Prevent columns from collapsing when empty
    padding-right: ($grid-gutter-width / 2);
    padding-left: ($grid-gutter-width / 2);
}

@each $breakpoint in map-keys($grid-breakpoints) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    // Allow columns to stretch full width below their breakpoints
    @for $i from 1 through $grid-columns {
        .col#{$infix}-#{$i} {
            @extend %grid-column;
        }
    }

    .col#{$infix},
    .col#{$infix}-auto {
        @extend %grid-column;
    }

    @include media-min-width($breakpoint, $grid-breakpoints) {
        // Provide basic `.col-{bp}` classes for equal-width flexbox columns
        .col#{$infix} {
            flex-basis: 0;
            flex-grow: 1;
            max-width: 100%;
        }

        .col#{$infix}-auto {
            flex: 0 0 auto;
            width: auto;
            max-width: none; // Reset earlier grid tiers
        }

        @for $i from 1 through $grid-columns {
            .col#{$infix}-#{$i} {
                flex: 0 0 percentage($i / $grid-columns);
                max-width: percentage($i / $grid-columns);
            }
        }

        .order#{$infix}-first {
            order: -1;
        }

        .order#{$infix}-last {
            order: $grid-columns + 1;
        }

        @for $i from 0 through $grid-columns {
            .order#{$infix}-#{$i} {
                order: $i;
            }
        }

        // `$columns - 1` because offsetting by the width of an entire row isn't possible
        @for $i from 0 through ($grid-columns - 1) {
            @if not ($infix == '' and $i == 0) {
                // Avoid emitting useless .offset-0
                .offset#{$infix}-#{$i} {
                    margin-left: if(($i / $grid-columns) == 0, 0, percentage($i / $grid-columns));
                }
            }
        }
    }
}

// Utilities for common `display` values
@each $breakpoint in map-keys($grid-breakpoints) {
    @include media-min-width($breakpoint) {
        $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

        .d#{$infix}-none {
            display: none;
        }

        .d#{$infix}-inline {
            display: inline;
        }

        .d#{$infix}-inline-block {
            display: inline-block;
        }

        .d#{$infix}-block {
            display: block;
        }

        .d#{$infix}-table {
            display: table;
        }

        .d#{$infix}-table-row {
            display: table-row;
        }

        .d#{$infix}-table-cell {
            display: table-cell;
        }

        .d#{$infix}-flex {
            display: flex;
        }

        .d#{$infix}-inline-flex {
            display: inline-flex;
        }
    }
}

// Flex variation
// Custom styles for additional flex alignment options
@each $breakpoint in map-keys($grid-breakpoints) {
    @include media-min-width($breakpoint) {
        $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

        // Flex direction
        .flex#{$infix}-row {
            flex-direction: row;
        }

        .flex#{$infix}-column {
            flex-direction: column;
        }

        .flex#{$infix}-row-reverse {
            flex-direction: row-reverse;
        }

        .flex#{$infix}-column-reverse {
            flex-direction: column-reverse;
        }

        // Flex wrap
        .flex#{$infix}-wrap {
            flex-wrap: wrap;
        }

        .flex#{$infix}-nowrap {
            flex-wrap: nowrap;
        }

        .flex#{$infix}-wrap-reverse {
            flex-wrap: wrap-reverse;
        }

        // Justify content
        .justify-content#{$infix}-start {
            justify-content: flex-start;
        }

        .justify-content#{$infix}-end {
            justify-content: flex-end;
        }

        .justify-content#{$infix}-center {
            justify-content: center;
        }

        .justify-content#{$infix}-between {
            justify-content: space-between;
        }

        .justify-content#{$infix}-around {
            justify-content: space-around;
        }

        // Align items
        .align-items#{$infix}-start {
            align-items: flex-start;
        }

        .align-items#{$infix}-end {
            align-items: flex-end;
        }

        .align-items#{$infix}-center {
            align-items: center;
        }

        .align-items#{$infix}-baseline {
            align-items: baseline;
        }

        .align-items#{$infix}-stretch {
            align-items: stretch;
        }

        // Align content
        .align-content#{$infix}-start {
            align-content: flex-start;
        }

        .align-content#{$infix}-end {
            align-content: flex-end;
        }

        .align-content#{$infix}-center {
            align-content: center;
        }

        .align-content#{$infix}-between {
            align-content: space-between;
        }

        .align-content#{$infix}-around {
            align-content: space-around;
        }

        .align-content#{$infix}-stretch {
            align-content: stretch;
        }

        // Align self item
        .align-self#{$infix}-auto {
            align-self: auto;
        }

        .align-self#{$infix}-start {
            align-self: flex-start;
        }

        .align-self#{$infix}-end {
            align-self: flex-end;
        }

        .align-self#{$infix}-center {
            align-self: center;
        }

        .align-self#{$infix}-baseline {
            align-self: baseline;
        }

        .align-self#{$infix}-stretch {
            align-self: stretch;
        }
    }
}
